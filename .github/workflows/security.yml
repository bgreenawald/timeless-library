name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=moderate

    - name: Run security scan with audit-ci
      run: npx audit-ci --moderate

    - name: Check for known security issues
      run: |
        # Check for common security patterns in code
        echo "Checking for potential security issues..."
        
        # Check for hardcoded secrets (more targeted approach)
        # Look for patterns that are more likely to be actual secrets
        if grep -r -E "(password\s*[:=]\s*['\"][^'\"]{8,}['\"]|secret\s*[:=]\s*['\"][^'\"]{8,}['\"]|api_key\s*[:=]\s*['\"][^'\"]{8,}['\"]|access_token\s*[:=]\s*['\"][^'\"]{8,}['\"]|private_key\s*[:=]\s*['\"][^'\"]{8,}['\"])" src/ --include="*.ts" --include="*.js" --include="*.astro" | grep -v "test" | grep -v "example" | grep -v "placeholder"; then
          echo "⚠️  Potential hardcoded secrets found. Please review."
          exit 1
        fi
        
        # Check for suspicious patterns that might indicate secrets
        if grep -r -E "(sk_|pk_|ghp_|gho_|ghu_|ghs_|ghr_)[a-zA-Z0-9]{20,}" src/ --include="*.ts" --include="*.js" --include="*.astro" | grep -v "test" | grep -v "example" | grep -v "placeholder"; then
          echo "⚠️  Potential API keys or tokens found. Please review."
          exit 1
        fi
        
        # Check for eval usage
        if grep -r "eval(" src/ --include="*.ts" --include="*.js"; then
          echo "⚠️  Use of eval() found. This can be a security risk."
          exit 1
        fi
        
        # Check for unsafe innerHTML usage (XSS risk)
        # Look for innerHTML usage that's not properly sanitized
        if grep -r "innerHTML" src/ --include="*.ts" --include="*.js" --include="*.astro" | grep -v "DOMPurify.sanitize"; then
          echo "⚠️  Unsafe use of innerHTML found. Consider using textContent or proper sanitization with DOMPurify."
          exit 1
        fi
        
        echo "✅ Basic security checks passed."

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, MIT-0, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, CC0-1.0, Unlicense