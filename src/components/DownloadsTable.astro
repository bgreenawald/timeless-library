---
import type { GithubRelease } from '../lib/github';

/**
 * Interface representing a GitHub release asset from the API response.
 */
interface GithubReleaseAsset {
  name: string;
  browser_download_url: string;
  size?: number;
  content_type?: string;
  download_count?: number;
}

/**
 * Interface representing a GitHub release from the API response.
 * Extends the existing GithubRelease type with additional properties.
 */
interface GitHubRelease {
  assets: GithubReleaseAsset[];
  tag_name: string;
  name?: string;
  body?: string;
  created_at?: string;
  published_at?: string;
  draft?: boolean;
  prerelease?: boolean;
}

interface Props {
  release: GitHubRelease;
  version: string | null;
  title: string;
}

const { release, version, title } = Astro.props;

/**
 * Helper function to get the content type and color for an asset.
 */
function getAssetLabelAndColor(assetName: string) {
  // Extract content type from filename (before the file extension)
  if (assetName.includes('-annotated.')) {
    return { label: 'Annotated', colorClasses: 'bg-green-100 text-green-800' };
  }
  if (assetName.includes('-modernized.')) {
    return { label: 'Modernized', colorClasses: 'bg-purple-100 text-purple-800' };
  }
  if (assetName.includes('-original.')) {
    return { label: 'Original', colorClasses: 'bg-blue-100 text-blue-800' };
  }
  if (assetName.endsWith('-metadata.json')) {
    return { label: 'Metadata', colorClasses: 'bg-yellow-100 text-yellow-800' };
  }
  
  // Fallback for files that don't follow the naming convention
  return { label: 'Other', colorClasses: 'bg-gray-100 text-gray-600' };
}

/**
 * Helper function to get sort priority for assets (lower numbers appear first).
 */
function getAssetSortPriority(assetName: string) {
  if (assetName.includes('-annotated.')) return 1;
  if (assetName.includes('-modernized.')) return 2;
  if (assetName.includes('-original.')) return 3;
  if (assetName.endsWith('-metadata.json')) return 4;
  return 5; // Other files
}


---

<section class="max-w-6xl mx-auto mb-24">
  <h2 class="text-pane text-3xl md:text-4xl text-center mb-12" set:html={title}>
  </h2>
  <div class="bg-white bg-opacity-50 rounded-lg p-6 shadow-lg">
    <div class="text-center mb-6">
      <p class="text-lg font-medium">Version: {version || 'Unknown'}</p>
    </div>
    
    <!-- Downloads Table -->
    <div class="overflow-x-auto">
      <table class="w-full border-collapse">
        <thead>
          <tr class="border-b-2 border-gray-300">
            <th class="text-left py-3 px-4 font-semibold text-gray-700">Type</th>
            <th class="text-left py-3 px-4 font-semibold text-gray-700">Format</th>
            <th class="text-center py-3 px-4 font-semibold text-gray-700">Download</th>
          </tr>
        </thead>
        <tbody>
          {release.assets
            .sort((a, b) => getAssetSortPriority(a.name) - getAssetSortPriority(b.name))
            .map(asset => {
            const { label, colorClasses } = getAssetLabelAndColor(asset.name);
            return (
              <tr class="border-b border-gray-200 hover:bg-gray-50">
                <td class="py-3 px-4">
                  <span class={`inline-block ${colorClasses} px-2 py-1 rounded text-sm font-medium`}>
                    {label}
                  </span>
                </td>
                <td class="py-3 px-4 font-medium">{asset.name.split('.').pop()?.toUpperCase() || 'Unknown'}</td>
                <td class="py-3 px-4 text-center">
                  <a 
                    href={asset.browser_download_url} 
                    download
                    class="download-button"
                  >
                    Download
                  </a>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  </div>
</section> 